--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")

--// Remotes
local requestEvent = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("Request")
local requestFunction = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Functions"):WaitForChild("Request")

--// Config
local targetStructures = { "Glacier Jar", "Petal Well", "Cryo Chamber" }
local potionsToBuy = {
    "Small Luck Potion", "Medium Luck Potion", "Large Luck Potion",
    "Small Speed Potion", "Medium Speed Potion", "Large Speed Potion",
    "Small Yield Potion", "Medium Yield Potion", "Large Yield Potion"
}

--// Variables
local localPlayer = Players.LocalPlayer
local plotFolder = nil
local autoEnabled = true
local inPotionMode = false
local lastCollect = tick()

--// UI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AutoFarmUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = localPlayer:WaitForChild("PlayerGui")

local timerLabel = Instance.new("TextLabel")
timerLabel.Size = UDim2.new(0, 220, 0, 30)
timerLabel.Position = UDim2.new(0, 10, 0, 10)
timerLabel.BackgroundTransparency = 0.4
timerLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
timerLabel.BorderSizePixel = 0
timerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
timerLabel.Font = Enum.Font.GothamSemibold
timerLabel.TextSize = 16
timerLabel.Text = "Potion Timer: Ready"
timerLabel.Parent = screenGui

--// Detect Plot
local function detectPlot()
    local plots = workspace:WaitForChild("Plots")
    for i = 1, 9 do
        local plot = plots:FindFirstChild(tostring(i))
        if plot and plot:FindFirstChild("Placed") then
            plotFolder = plot.Placed
            StarterGui:SetCore("SendNotification", {Title="AutoFarm", Text="✅ Found Plot "..i, Duration=5})
            break
        end
    end
end
detectPlot()

--// Stock Checker
local function potionHasStock(potionName)
    local guiPath = localPlayer.PlayerGui:FindFirstChild("Windows")
    if not guiPath then return false end

    local listFrame = guiPath:FindFirstChild("Gear") and guiPath.Gear:FindFirstChild("ListFrame") and guiPath.Gear.ListFrame:FindFirstChild("List")
    if not listFrame then return false end

    local potionFrame = listFrame:FindFirstChild(potionName)
    if not potionFrame then return false end

    local stockLabel = potionFrame:FindFirstChild("Container") and potionFrame.Container:FindFirstChild("Stock")
    if not stockLabel then return false end

    local stockText = stockLabel.Text or stockLabel.ContentText
    if not stockText then return false end

    return not stockText:match("Out of Stock")
end

--// Parse Restock Timer
local function getRestockTime()
    local countdown = localPlayer.PlayerGui:FindFirstChild("Windows") and localPlayer.PlayerGui.Windows:FindFirstChild("Gear") and localPlayer.PlayerGui.Windows.Gear:FindFirstChild("Countdown")
    if not countdown then return 60 end

    local text = countdown.Text or countdown.ContentText
    if not text or not text:match("%d+:%d+") then return 60 end

    local minutes, seconds = text:match("(%d+):(%d+)")
    if not minutes or not seconds then return 60 end

    return tonumber(minutes) * 60 + tonumber(seconds)
end

--// Potion Buying
local function buyPotionsSafe()
    inPotionMode = true
    StarterGui:SetCore("SendNotification", {Title="AutoFarm", Text="⚗️ Potion mode started...", Duration=4})

    task.spawn(function()
        local anyBought = false

        for _, potion in ipairs(potionsToBuy) do
            if potionHasStock(potion) then
                for i = 1, 20 do
                    pcall(function()
                        requestFunction:InvokeServer("PurchaseGear", potion)
                    end)
                    task.wait(0.1)
                end
                anyBought = true
            end
        end

        if anyBought then
            StarterGui:SetCore("SendNotification", {Title="AutoFarm", Text="✅ Potion purchases complete.", Duration=4})
        else
            StarterGui:SetCore("SendNotification", {Title="AutoFarm", Text="⚠️ No potions available.", Duration=4})
        end

        -- After buying, wait for restock timer
        local restockTime = getRestockTime()
        for i = restockTime, 0, -1 do
            timerLabel.Text = "Next Restock in: " .. i .. "s"
            task.wait(1)
        end

        inPotionMode = false
        lastCollect = tick()
    end)
end

--// Main Loop
RunService.Heartbeat:Connect(function()
    if not autoEnabled or not plotFolder then return end
    if inPotionMode then return end

    -- Check if potions available
    local hasStock = false
    for _, potion in ipairs(potionsToBuy) do
        if potionHasStock(potion) then
            hasStock = true
            break
        end
    end

    -- If stock exists, enter potion mode
    if hasStock then
        buyPotionsSafe()
        return
    end

    -- Otherwise, just farm
    local now = tick()
    if now - lastCollect >= 1 then
        for _, name in ipairs(targetStructures) do
            local structure = plotFolder:FindFirstChild(name)
            if structure then
                requestEvent:FireServer("CollectStructure", structure)
            end
        end
        lastCollect = now
    end

    requestEvent:FireServer("ManualGather")

    -- Sync timer label to restock countdown
    local restockTime = getRestockTime()
    timerLabel.Text = "Next Restock in: " .. restockTime .. "s"
end)
